# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/template_alias.h":
  # "clif_vector" is a template alias in C++ definition. Clif does not care
  # about the template arg parameter type in the below example(str).
  # clif_vector<T>'s underlying type is always vector<int>, no matter what T is.
  def func_default_vector_input(s: `clif_vector` as list<int>)

  # default_vector<T>'s underlying type(vector<T>) is influenced by T. the
  # template arg parameter type we put in the below example matters, which
  # should match the underlying template arg type at C++ side.
  def `func_default_vector_input` as func_default_vector_input_copy
      (s: `default_vector` as list<int>)
  def func_default_vector_output() -> (s: `clif_vector` as list<int>)
  def func_default_vector_return() -> (s: `clif_vector` as list<int>)
  def func_clif_vector(c: `clif_vector` as list<int>)

  def func_signed_size_type_output() -> int
