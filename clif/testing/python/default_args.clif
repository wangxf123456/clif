# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/default_args.h":
  class MyClass:
    enum Enum
    enum Flag

    class Arg:
      e: Enum
    def MethodWithDefaultClassArg(
        self, arg: Arg = default, i: int = default) -> int
    def MethodWithUnknownDefaultArg(self, i: int, arg: Arg = default) -> int
    def MethodWithDefaultEnumArg(
        self, e: Enum = default, i: int = default) -> int
    def MethodWithDefaultPtrArg(self, a: Arg = default, i: int = default) -> int
    def MethodWithDefaultFlag(self, f: int = default, i: int = default) -> int
    def MethodThrowAwayDefault(self, input1: int, input2: int) -> int
    def `MethodThrowAwayDefault` as MethodThrowAwayDefault2 (self, input1: int, input2: int)

    # ValueError: A default for integral type pointer argument is not supported. Drop =default in def MethodWithOutputDefault1(input2).
    # def `MethodWithOutputDefault` as MethodWithOutputDefault1(self, input1: int = default, input2: int = default)
    # def `MethodWithOutputDefault` as MethodWithOutputDefault2(self, input1: int, input2: int = default)

    def `MethodWithOutputDefault` as MethodWithOutputDefault3(self, input1: int, input2: int)
    def `MethodWithOutputDefault` as MethodWithOutputDefault4(self, input1: int = default) -> int
    # Be careful when dropping the default specifier of output param, the initial code may be confusing.
    def `MethodWithOutputDefault` as MethodWithOutputDefault5(self, input1: int) -> int
    def `MethodWithOutputDefault` as MethodWithOutputDefault6(self, input1: int = default)
    def `MethodWithOutputDefault` as MethodWithOutputDefault7(self, input1: int)
    def `MethodWithOutputDefault` as MethodWithOutputDefault8(self)
